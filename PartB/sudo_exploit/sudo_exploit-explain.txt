Please provide an explanation about how you construct your solution (the program name):


- What value(s) did you overwrite? How did you find them? (subpart1)

I write 4 bytes starting at [0x0805c7ff, 0x0805c800, 0x0805c801, 0x0805c802], as 0x0805c800 is the starting address to `uid` in struct `user_details`.

```shell
(gdb) p &user_details
$1 = (struct user_details *) 0x805c800 <user_details>
(gdb) p user_details
$2 = {uid = 0, euid = 0, gid = 0, egid = 0, username = 0x805dc15 "root",
  cwd = 0x805dd14 "/home/student/A2/PartB/sudo_exploit", tty = 0x805dd44 "/dev/pts/0", host = 0x805dd65 "debian",
  shell = 0x805dc20 "/bin/bash", groups = 0x805dce0, ngroups = 1, ts_cols = 118, ts_lines = 45}
(gdb) ptype user_details.uid
type = unsigned
```
(Note: I could not write at 0x805c800, as I encountered this error `warning: command substitution: ignored null byte in input`.)



- What value(s) did you overwrite? How did you find them? (subpart2)

In total 8 bytes.
I write 4 bytes starting at [0x0805c800, 0x0805c801, 0x0805c802, 0x0805c803], as 0x0805c800 is the starting address to `uid` in struct `user_details`.
I write 4 bytes starting at address pointed by `argv` of main().

I googled `sudo_debug exploit with alsr on` and this [paper](https://www.comp.nus.edu.sg/~tsunami/papers/usenixsec15.pdf) from our SoC came out from the search history.
Like this paper mentioned: "We observe that a variable's address is frequently saved in memory due to the limitation of CPU registers.".

At the beginning, I noticed overwriting user_details.uid is not enough.
As `sudo_debug()` will be called again, and `printf(%30\$n)` will produces some segmentation fault.
Hence the goal is to change level from 9 to something else before the next call, so `sudo_debug()` returns at the `if`.

So I searched address of 0x0805c800 and 0xffd2b144(my run) with gdb.
```shell
(gdb) # search address to overwrite user_details.uid at 0x0805c800
(gdb) find $sp-2000,$sp,0x0805c800
0xffd2ae94
1 pattern found.
(gdb) bt
#0  sudo_debug (level=9, fmt=0x8055e42 "settings: %s=%s") at ./sudo.c:1219
#1  0x0804e9b1 in parse_args (argc=1, argv=0xffd2b150, nargc=0xffd2b05c, nargv=0xffd2b060, settingsp=0xffd2b064,
    env_addp=0xffd2b068) at ./parse_args.c:424
#2  0x0804f11f in main (argc=4, argv=0xffd2b144, envp=0xffd2b158) at ./sudo.c:204
(dgb) # search address to overwrite argv to avoid -D9 for the subsequent calls
(gdb) find $sp-2000,$sp,0xffd2b144(my run)
0xffd2ae3c
1 pattern found.
```



- Did you meet the problem that addresses inside/outside GDB are different? Is that a problem or how did you overcome it?

No.



- Other comments:

